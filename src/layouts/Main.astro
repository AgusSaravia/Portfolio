---
import "../../styles/global.css";
import Footer from "../components/Social.astro";
import Navigation from "../components/Navigation.astro";
const { title } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />

    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content="Agustin Saravia's website" />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap"
      rel="stylesheet"
    />

    <title>{title}</title>
  </head>

  <body>
    <main class="container">
      <Navigation />
      <slot />
      {
        //<Footer />}
      }
      <style is:global>
        h1 {
          font-size: 3rem;
          line-height: 1;
        }

        h1 + h2 {
          font-size: 1.1rem;
          margin-top: -1.4rem;
          opacity: 0.9;
          font-weight: 400;
        }

        .container {
          display: flex;
          flex-direction: column;
          justify-content: space-between;
          max-width: 60rem;
          margin: auto;
        }
      </style>
      <script>
        const DARK_THEME_CLASS = "dark";
        const COLOUR_MODE = "COLOUR_MODE";
        const LIGHT_THEME = "LIGHT";
        const DARK_THEME = "DARK";

        // Get elements directly (no need for strings)
        const toggle = document.querySelector("[data-theme-toggle]");
        const rootEl = document.documentElement;

        // Toggle function
        if (toggle) {
          toggle.addEventListener("click", () => {
            const colourMode = rootEl.classList.toggle(DARK_THEME_CLASS)
              ? DARK_THEME
              : LIGHT_THEME;
            window.localStorage.setItem(COLOUR_MODE, colourMode);
          });
        }

        // Get initial colour mode
        function getInitialColourMode() {
          const previouslySavedColourMode =
            window.localStorage.getItem(COLOUR_MODE);
          if (previouslySavedColourMode) {
            return previouslySavedColourMode;
          }
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return DARK_THEME;
          }
          return LIGHT_THEME;
        }

        // Set initial colour mode
        function setInitialColourMode(mode) {
          if (mode === LIGHT_THEME) {
            rootEl.classList.remove(DARK_THEME_CLASS);
          } else {
            rootEl.classList.add(DARK_THEME_CLASS);
          }
        }

        const initialColorMode = getInitialColourMode();
        setInitialColourMode(initialColorMode);
      </script>
    </main>
  </body>
</html>
